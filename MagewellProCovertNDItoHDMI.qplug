-- Information block for the plugin
PluginInfo = {
  Name = "Magewell~Pro Convert NDI To HDMI", -- Name of the plugin
  Version = "1.0", -- Current plugin version
  Id = "qsysc.Magewell.Pro Convert NDI To HDMI", -- Unique identifier for the plugin. Must not conflict with other installed plugins
  Description = "Plugin for control of a Magewell Pro Convert NDI To HDMI using the REST API.", -- A brief description of the plugin
  BuildVersion = "0.0.0.0", -- Current code iteration tracking
  Author = "Glen Gorton", -- Name or Contact Info of the author
  Manufacturer = "Magewell", -- Name of manufacturer the product the plugin integrates
  -- Model = "", -- Model name of the product the plugin integrates
  -- IsManaged = true, -- Add the plugin to the managed inventory of the design
  -- Type = "", -- Reflect reporting type
  ShowDebug = true,
}

width = 350 -- scalable plugin width
control_depth = 16 -- scalable control depth
control_gap = 3 -- vertical space between controls

Colors = {
    none = {0, 0, 0, 0},
    primary = {212, 202, 226},
    secondary = {51, 51, 51},
    heading = {50, 50, 50},
    label = {50, 50, 50},
    stroke = {51, 51, 51},
    black = {51, 51, 51},
    navy = {15, 63, 106},
    lightblue = {143, 197, 247},
    magewelllogo = {20, 77, 109}
}

Sizes = {
    ["Button"] = {36, control_depth},
    ["Text"] = {(width - 30) / 2, control_depth},
    ["Status"] = {width - 30, (control_depth * 2) + (control_gap * 1)},
    ["LED"] = {16, control_depth},
    ["ListBox"] = {width - 30, (control_depth * 10) + (control_gap * 9)},
    ["Image"] = {width - 30, (control_depth * 6) + (control_gap * 5)}
}

Master_Object = {{

    ["PageName"] = "Dashboard",

    ["Groupings"] = {{
        ["Name"] = "Device",
        ["Depth"] = 15,
        ["Controls"] = {{
            Name = "Status",
            PrettyName = "Dashboard~Status",
            Label = "Status",
            ControlType = "Indicator",
            IndicatorType = "Status",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Status,
            GridPos = 1
        }, {
            Name = "Device Name",
            PrettyName = "Dashboard~Device Name",
            Label = "Device Name",
            ControlType = "Text",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 3
        }, {
            Name = "Model",
            PrettyName = "Dashboard~Model",
            Label = "Model",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 4
        }, {
            Name = "Serial",
            PrettyName = "Dashboard~Serial",
            Label = "Serial",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 5
        }, {
            Name = "Hardware Revision",
            PrettyName = "Dashboard~Hardware Revision",
            Label = "Hardware Revision",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 6
        }, {
            Name = "Firmware Version",
            PrettyName = "Dashboard~Firmware Version",
            Label = "Firmware Version",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 7
        }, {
            Name = "Firmware Up To Date",
            PrettyName = "Dashboard~Firmware Up To Date",
            Label = "Firmware Up To Date",
            ControlType = "Indicator",
            IndicatorType = "LED",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.LED,
            GridPos = 8
        }, {
            Name = "DHCP",
            PrettyName = "Dashboard~DHCP",
            Label = "DHCP",
            ControlType = "Indicator",
            IndicatorType = "LED",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.LED,
            GridPos = 9
        }, {
            Name = "MAC Address",
            PrettyName = "Dashboard~MAC Address",
            Label = "MAC Address",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 10
        }, {
            Name = "CPU Usage",
            PrettyName = "Dashboard~CPU Usage",
            Label = "CPU Usage",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 11
        }, {
            Name = "Memory Usage",
            PrettyName = "Dashboard~Memory Usage",
            Label = "Memory Usage",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 12
        }, {
            Name = "Core Temperature",
            PrettyName = "Dashboard~Core Temperature",
            Label = "Core Temperature",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 13
        }, {
            Name = "Board ID",
            PrettyName = "Dashboard~Board ID",
            Label = "Board ID",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 14
        }, {
            Name = "Up Time",
            PrettyName = "Dashboard~Up Time",
            Label = "Up Time",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 15
        }}

    }, {
        ["Name"] = "Ethernet",
        ["Depth"] = 3,
        ["Controls"] = {{
            Name = "Ethernet Connection",
            PrettyName = "Dashboard~Ethernet Connection",
            Label = "Ethernet Connection",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 1
        }, {
            Name = "Ethernet Send Speed",
            PrettyName = "Dashboard~Ethernet Send Speed",
            Label = "Send Speed",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 2
        }, {
            Name = "Ethernet Receive Speed",
            PrettyName = "Dashboard~Ethernet Receive Speed",
            Label = "Receive Speed",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 3
        }}

    }, {
        ["Name"] = "NDI",
        ["Depth"] = 15,
        ["Controls"] = {{
            Name = "NDI Connected",
            PrettyName = "Dashboard~NDI Connected",
            Label = "NDI Connected",
            ControlType = "Indicator",
            IndicatorType = "LED",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.LED,
            GridPos = 1
        }, {
            Name = "NDI Current Source",
            PrettyName = "Dashboard~NDI Current Source",
            Label = "Current Source",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 2
        }, {
            Name = "NDI Tally Preview",
            PrettyName = "Dashboard~NDI Tally Preview",
            Label = "Tally Preview",
            ControlType = "Indicator",
            IndicatorType = "LED",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.LED,
            GridPos = 3
        }, {
            Name = "NDI Tally Program",
            PrettyName = "Dashboard~NDI Tally Program",
            Label = "Tally Program",
            ControlType = "Indicator",
            IndicatorType = "LED",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.LED,
            GridPos = 4
        }, {
            Name = "NDI Video Drop Frames",
            PrettyName = "Dashboard~NDI Video Drop Frames",
            Label = "Video Drop Frames",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 5
        }, {
            Name = "NDI Audio Drop Frames",
            PrettyName = "Dashboard~NDI Audio Drop Frames",
            Label = "Audio Drop Frames",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 6
        }, {
            Name = "NDI Video Bitrate",
            PrettyName = "Dashboard~NDI Video Bitrate",
            Label = "Video Bitrate",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 7
        }, {
            Name = "NDI Audio Bitrate",
            PrettyName = "Dashboard~NDI Audio Bitrate",
            Label = "Audio Bitrate",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 8
        }, {
            Name = "NDI Resolution",
            PrettyName = "Dashboard~NDI Resolution",
            Label = "Resolution",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 9
        }, {
            Name = "NDI Video Scan",
            PrettyName = "Dashboard~NDI Video Scan",
            Label = "Video Scan",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 10
        }, {
            Name = "NDI Field Rate",
            PrettyName = "Dashboard~NDI Field Rate",
            Label = "Field Rate",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 11
        }, {
            Name = "NDI Audio Channels",
            PrettyName = "Dashboard~NDI Audio Channels",
            Label = "Audio Channels",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 12
        }, {
            Name = "NDI Audio Sampling",
            PrettyName = "Dashboard~NDI Audio Sampling",
            Label = "Audio Sampling",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 13
        }, {
            Name = "NDI Jitter Video",
            PrettyName = "Dashboard~NDI Jitter Video",
            Label = "Video Jitter",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 14
        }, {
            Name = "NDI Jitter Audio",
            PrettyName = "Dashboard~NDI Jitter Audio",
            Label = "Audio Jitter",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 15
        }}

    }}
},{
    ["PageName"] = "NDI",

    ["Groupings"] = {{
        ["Name"] = "NDI Video",
        ["Depth"] = 5,
        ["Controls"] = {{
            Name = "NDI Enabled",
            PrettyName = "NDI Video~NDI Enabled",
            Label = "NDI Enabled",
            ControlType = "Button",
            ButtonType = "Toggle",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Button,
            GridPos = 1
        }, {
            Name = "NDI Current Source",
            PrettyName = "Dashboard~NDI Current Source",
            Label = "Current Source",
            ControlType = "Indicator",
            IndicatorType = "Text",
            PinStyle = "Output",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 2
        },{
            Name = "NDI Group Name",
            PrettyName = "NDI Video~NDI Group Name",
            Label = "Group Name",
            ControlType = "Text",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 3
        }, {
            Name = "NDI Presets",
            PrettyName = "NDI Video~NDI Presets",
            Label = "Presets",
            ControlType = "Text",
            Style = "ComboBox",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 4
        }, {
            Name = "NDI Sources",
            PrettyName = "NDI Video~NDI Sources",
            Label = "Sources",
            ControlType = "Text",
            Style = "ComboBox",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 5
        }}
    }}
},{
    ["PageName"] = "Setup",

    ["Groupings"] = {{
        ["Name"] = "Setup",
        ["Depth"] = 10,
        ["Controls"] = {{
            Name = "Connect",
            PrettyName = "Setup~Connect",
            Label = "Connect",
            ControlType = "Button",
            ButtonType = "Toggle",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Button,
            GridPos = 1
        },{
            Name = "IP Address",
            PrettyName = "Setup~IP Address",
            Label = "IP Address",
            ControlType = "Text",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 2
        },{
            Name = "Username",
            PrettyName = "Setup~Username",
            Label = "Username",
            ControlType = "Text",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 3
        }, {
            Name = "Password",
            PrettyName = "Setup~Password",
            Label = "Password",
            ControlType = "Text",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 4
        }, {
            Name = "Delay Between Polling Queries",
            PrettyName = "Setup~Delay Between Polling Queries",
            Label = "Delay Between Polling Queries",
            ControlType = "Text",
            DefaultValue = "1",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 5
        }, {
            Name = "Event Log Prefix",
            PrettyName = "Setup~Event Log Prefix",
            Label = "Event Log Prefix",
            ControlType = "Text",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 6
        }, {
            Name = "Log Entry",
            PrettyName = "Setup~Log Entry",
            Label = "Log Entry",
            ControlType = "Text",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 7
        }, {
            Name = "Log Severity",
            PrettyName = "Setup~Log Severity",
            Label = "Log Severity",
            ControlType = "Text",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Text,
            GridPos = 8
        }, {
            Name = "Log Trigger",
            PrettyName = "Setup~Log Trigger",
            Label = "Log Trigger",
            ControlType = "Button", 
            ButtonType = "Trigger",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Button,
            GridPos = 9
        }, {
            Name = "Reboot",
            PrettyName = "Setup~Reboot",
            Label = "Reboot",
            ControlType = "Button", 
            ButtonType = "Trigger",
            PinStyle = "Both",
            UserPin = true,
            Size = Sizes.Button,
            GridPos = 10
        }}
    }}
}}


-- Define the color of the plugin object when dragged into the design
function GetColor(props)
    return Colors.magewelllogo
end

-- The name that will initially display when dragged into a design
function GetPrettyName(props)
  return string.format("Magewell\nPro Convert\nNDI To HDMI\n[%s]", PluginInfo.Version)
end

-- Define User configurable Properties of the plugin
function GetProperties()
    local props = {}
    return props
end

-- Optional function used if plugin has multiple pages
function GetPages(props)
    local pages = {}
    for i, tbl in ipairs(Master_Object) do
      table.insert(pages, {name = tbl.PageName})
    end
    return pages
end

-- Optional function to define pins on the plugin that are not connected to a Control
function GetPins(props)
    local pins = {}
    return pins
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
    return props
end

-- Optional function to define components used within the plugin
function GetComponents(props)
    local components = {}
    return components
end

-- Optional function to define wiring of components used within the plugin
function GetWiring(props)
    local wiring = {}
    return wiring
end

-- Defines the Controls used within the plugin
function GetControls(props)
    local ctls = {}
    for i, page in ipairs(Master_Object) do
      for i, grouping in ipairs(page.Groupings) do
          for i, control in ipairs(grouping.Controls) do
              table.insert(ctls, control)
          end
      end
    end
    return ctls
end

-- Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
    local graphics, layout, control_slots = {}, {}, {}
    
    local page_index = props["page_index"].Value
    
    -- starting depth
    local total_depth = 0
    
    -- dynamically create graphics boxes
    for i, grouping in ipairs(Master_Object[page_index].Groupings) do
    
        total_depth = total_depth + control_depth
    
        depth = grouping.Depth
    
        len = string.len(grouping.Name)
    
        table.insert(graphics, {
            Type = "GroupBox",
            Fill = Colors.lightblue,
            StrokeColor = Colors.stroke,
            StrokeWidth = 2,
            CornerRadius = 8,
            HTextAlign = "Left",
            Position = {
                0,
                total_depth
            },
            Size = {
                width,
                40 + (depth * control_depth) + ((depth - 1) * control_gap)
            }
        })
    
        -- generate control slots per group box depth and control_depth requirement
    
        grouping["Control_Slots"] = {}
    
        for n = 1, grouping.Depth do
    
            grouping["Control_Slots"][n] = ((total_depth + 25) + (control_depth * (n - 1)) + ((n - 1) * control_gap))
    
        end
    
        -- dynamically create groupbox labels
        table.insert(graphics, {
            Type = "Label",
            Text = Master_Object[page_index].Groupings[i].Name,
            -- Size = 11,
            Color = {
                255,
                255,
                255
            },
            Fill = Colors.heading,
            StrokeWidth = 0,
            CornerRadius = 4,
            Position = {
                15,
                total_depth - 8
            },
            Size = {
                len <= 12 and 90 or len <= 20 and 140 or len <= 30 and 170,
                18
            },
            Font = "Montserrat",
            FontStyle = "Medium"
        })
    
        total_depth = total_depth + 40 + ((depth * control_depth) + ((depth - 1) * control_gap))
    
    end
    
    -- width of the group box minus borders
    local box_width = (width - 60)
    
    for i, grouping in ipairs(Master_Object[page_index].Groupings) do
    
        local Slots = grouping.Control_Slots
    
        for _, ctl in ipairs(grouping.Controls) do
    
            local pos_x = nil
            local pos_y = nil
    
            if (ctl.Width and (ctl.Width == "Full")) then
                pos_x = 15
                pos_y = (Slots[ctl.GridPos] + control_depth + control_gap)
            else
                if (ctl.Position) then
                    pos_x = ctl.Position
                else
                    pos_x = (width - 15) - ctl.Size[1]
                end
                pos_y = Slots[ctl.GridPos]
            end
    
            layout[ctl.Name] = {
                PrettyName = ctl.PrettyName,
                Legend = ctl.Legend,
                Style = ctl.Style,
                Position = {
                    pos_x,
                    pos_y
                },
                Size = ctl.Size,
                Font = "Droid Sans",
                FontSize = 8
            }
    
            if ctl.Label then
                table.insert(graphics, {
                    Type = "Label",
                    Text = ctl.Label,
                    HTextAlign = "Left",
                    Color = Colors.label,
                    Font = "Droid Sans",
                    Position = {
                        15,
                        (Slots[ctl.GridPos] ~= nil) and Slots[ctl.GridPos] or Slots[#Slots]
                    },
                    Size = {
                        (ctl.Width == "Full") and (width - 30) or (width - 30) - ctl.Size[1],
                        control_depth
                    }
                })
            end
    
        end
    
    end
    return layout, graphics
end



------------------------ USER COMPONENT Runtime Code is below wrapped inside of 'if Controls then...user script...end'
--Start event based logic
if Controls then


--[[

# Q-SYS-Magewell-Pro-Convert-NDI-To-HDMI

- Magwell Pro Convert NDI To HDMI Q-Sys User Component (REST API)
- Written by Glen Gorton
- Tested with Firmware version: 1.1.938

]]


-- Services
rapidjson = require "rapidjson"
pollTimer = Timer.New()
pollDelayTimer = Timer.New()


-- Constants
FirmwareUpToDateEventLog = false

Text_Indicators = {"Log Entry", "Log Severity", "Device Name", "Model", "Serial", "MAC Address", "Ethernet Connection", "Ethernet Send Speed", "Ethernet Receive Speed", "Hardware Revision", "Firmware Version", "CPU Usage",
"Memory Usage", "Core Temperature", "Board ID", "Up Time", "NDI Current Source", "NDI Sources", "NDI Presets", "NDI Group Name", "NDI Video Drop Frames", "NDI Audio Drop Frames", "NDI Video Bitrate", "NDI Audio Bitrate",
"NDI Resolution", "NDI Video Scan", "NDI Field Rate", "NDI Audio Channels", "NDI Audio Sampling", "NDI Jitter Video", "NDI Jitter Audio"}

Boolean_Indicators = {"DHCP", "Firmware Up To Date", "NDI Connected", "NDI Tally Preview", "NDI Tally Program"}

EventLogSeverity = {"Normal", "Warning", "Error"}
Controls["Log Severity"].Choices = EventLogSeverity

QueryList = {
"get-summary-info", -- Use the interface to obtain status and parameters of the Pro Convert device, including device information, Ethernet status, USB RNDIS status, and NDI status.
"get-eth-status", -- Use the interface to obtain the ethernet status with administrative rights.
"get-ndi-config", -- Use the interface to obtain NDI configurations.
--"get-channel", -- Use the interface to obtain selected source name.
"list-channels", -- Use the interface to obtain the source list ready to be decoded. The following 2 types are contained. 1. The preset sources which are obtained using the list-channels interface. 2. The auto-detected NDI sources which are obtained using get-ndi-sources.
"get-ndi-sources", -- Use the interface to retrieve available NDI sources.
--"get-video-config", -- Use the interface to obtain the video settings.
--"get-signal-info", -- Use the interface to obtain the input signal information.
}

status_tbl = {}
-- insert status table keys and associated message/code
status_tbl[0] = {message = "MW_STATUS_SUCCESS", code = 0}
status_tbl[1] = {message = "MW_STATUS_PENDING", code = 1}
status_tbl[2] = {message = "MW_STATUS_TIMEOUT", code = 1}
status_tbl[3] = {message = "MW_STATUS_INTERRUPTED", code = 1}
status_tbl[4] = {message = "MW_STATUS_TRY_AGAIN", code = 1}
status_tbl[5] = {message = "MW_STATUS_NOT_IMPLEMENTED", code = 1}
status_tbl[6] = {message = "MW_STATUS_UNKNOWN_ERROR", code = 1}
status_tbl[7] = {message = "MW_STATUS_INVALID_ARG", code = 1}
status_tbl[8] = {message = "MW_STATUS_NO_MEMORY", code = 1}
status_tbl[9] = {message = "MW_STATUS_UNSUPPORTED", code = 1}
status_tbl[10] = {message = "MW_STATUS_FILE_BUSY", code = 1}
status_tbl[11] = {message = "MW_STATUS_DEVICE_BUSY", code = 1}
status_tbl[12] = {message = "MW_STATUS_DEVICE_LOST", code = 1}
status_tbl[13] = {message = "MW_STATUS_IO_FAILED", code = 1}
status_tbl[14] = {message = "MW_STATUS_READ_FAILED", code = 1}
status_tbl[15] = {message = "MW_STATUS_WRITE_FAILED", code = 1}
status_tbl[16] = {message = "MW_STATUS_NOT_EXIST", code = 1}
status_tbl[17] = {message = "MW_STATUS_TOO_MANY", code = 1}
status_tbl[18] = {message = "MW_STATUS_TOO_LARGE", code = 1}
status_tbl[19] = {message = "MW_STATUS_OVERFLOW", code = 1}
status_tbl[20] = {message = "MW_STATUS_UNDERFLOW", code = 1}
status_tbl[21] = {message = "MW_STATUS_FORMAT_ERROR", code = 1}
status_tbl[22] = {message = "MW_STATUS_FILE_EXISTS", code = 1}
status_tbl[23] = {message = "MW_STATUS_FILE_TYPE_ERROR", code = 1}
status_tbl[24] = {message = "MW_STATUS_DEVICE_TYPE_ERROR", code = 1}
status_tbl[25] = {message = "MW_STATUS_IS_DIRECTORY", code = 1}
status_tbl[26] = {message = "MW_STATUS_READ_ONLY", code = 1}
status_tbl[27] = {message = "MW_STATUS_RANGE_ERROR", code = 1}
status_tbl[28] = {message = "MW_STATUS_BROKEN_PIPE", code = 1}
status_tbl[29] = {message = "MW_STATUS_NO_SPACE", code = 1}
status_tbl[30] = {message = "MW_STATUS_NOT_DIRECTORY", code = 1}
status_tbl[31] = {message = "MW_STATUS_NOT_PERMITTED", code = 1}
status_tbl[32] = {message = "MW_STATUS_BAD_ADDRESS", code = 1}
status_tbl[33] = {message = "MW_STATUS_SEEK_ERROR", code = 1}
status_tbl[34] = {message = "MW_STATUS_CROSS_DEVICE_LINK", code = 1}
status_tbl[35] = {message = "MW_STATUS_NOT_INITIALIED", code = 1}
status_tbl[36] = {message = "MW_STATUS_AUTH_FAILED", code = 2}
status_tbl[37] = {message = "MW_STATUS_NOT_LOGGED_IN", code = 2}
status_tbl[38] = {message = "MW_STATUS_WRONG_STATE", code = 1}
status_tbl[39] = {message = "MW_STATUS_MISMATCH", code = 1}
status_tbl[40] = {message = "MW_STATUS_VERIFY_FAILED", code = 1}
status_tbl[41] = {message = "MW_STATUS_CONSTRAINT_VIOLATION", code = 1}


-- Functions

function Initialize()
  session_id = ""
  ResetTextIndicators()
  ResetBooleanIndicators()
  channels, ndi_sources = {}, {}
  Controls["NDI Sources"].Choices = {}
  if Controls["IP Address"].String == "" then return SetStatus(3, "No IP Address") end
  ip = Controls['IP Address'].String:match('(%d?%d?%d%.%d?%d?%d%.%d?%d?%d%.%d?%d?%d)');
  Controls["IP Address"].Color = ip and 'Green' or 'Red'
  --SetStatus(ip and 3 or 2, ip and "" or "IP Address Invalid")
  SetStatus(ip and 5 or 2, ip and "Script Restarted" or "IP Address Invalid")
  if not ip then return print("User.Error: IP Address Invalid") end
  Connect()
end

function Connect()
  if not Controls["Connect"].Boolean then
    pollDelayTimer:Stop()
    ResetTextIndicators()
    ResetBooleanIndicators()
    SetStatus(3, "Component Manually Disconnected")
    
    -- Send Logout command to device.
    HttpDownload("logout")
    
  else
    -- Concatentate username and encrypted password (MD5 hash)
    query = "login&id="..Controls["Username"].String.."&pass="..Crypto.MD5Compute(Controls["Password"].String)
    
    HttpClient.Download{
    Url = "http://"..ip.."/mwapi?method="..query,
    Headers = {
      ["Content-Type"] = "application/json",
      ["Cookie"] = session_id,
    },
    Timeout = 5,
    EventHandler = Result
    }

    -- Start Polling -- MOVED within the Result() function - Polling will only start if the Session ID returns successfully. (ie. successful login to device)
    --Timer.CallAfter(StartPollDelay, 3)
    
  end
end

function ResetTextIndicators()
  for i, control_name in ipairs(Text_Indicators) do
    Controls[control_name].String = ""
  end
end

function ResetBooleanIndicators()
  for i, control_name in ipairs(Boolean_Indicators) do
    Controls[control_name].Boolean = false
  end
end

function setPresetChoices()
  presetchoices = {}
  for i, tbl in ipairs(all_presets) do
    table.insert(presetchoices, tbl["name"])
    --print(tbl["name"])
  end
  Controls["NDI Presets"].Choices = presetchoices
end

function setNDIChoices()
  ndichoices = {}
  for i, tbl in ipairs(all_sources) do
    table.insert(ndichoices, tbl["name"])
    --print(tbl["name"])
  end
  Controls["NDI Sources"].Choices = ndichoices
end


function SetStatus(code, message, lookup)

  -- if there's a lookup key, fetch the code and message
  if lookup then
    code = status_tbl[lookup].code
    message = status_tbl[lookup].message
  end
  
  Controls["Status"].Value = code
  Controls["Status"].String = string.format("%s%s%s", message, (message == "") and "" or ": ", ip and ip or "None")
  
  if (code ~= 0) then return print(string.format("User.Info: Settings Status with Code: '%d', Message: '%s'", code, message)) end
  if (code == 2) then end
end


function EventLog(log, severity)
  Controls["Log Entry"].String = string.format("%s: %s", Controls["Event Log Prefix"].String, log)
  Controls["Log Severity"].String = severity
  Controls["Log Trigger"]:Trigger()
end


function Poll()
    --print("POLLING Queries: "..#QueryList)
    --print("PollWait = "..tostring(pollWait))
    if #QueryList > 0 and not pollWait then  -- If there are commands in the buffer, send the next command.
    query = table.remove(QueryList, 1)
    HttpDownload(query)
    table.insert(QueryList, query) -- Inserts the command sent back into the QueryList at the end of the array.
    --StartPollDelay()
  end
end


-- Will temporarily stop the Poll() function. StartPollDelay() added to quick trigger controls.
function StartPollDelay(ctl)
  if ctl then
    --pollTimer:Stop()
    pollWait = false
    --print("POLLWAIT IS FALSE")
    Poll()
  else
    pollWait = true
    --print("POLLWAIT IS TRUE")
    pollDelayTimer:Start(tonumber(Controls["Delay Between Polling Queries"].String))
  end
end


function HttpDownload(...)

  if not ip then return print("User.Error: IP address invalid") end
  
  --if not Controls["Connect"].Boolean then return SetStatus(3, "Component has been Manually Disconnected") end -- MOVED to Result() function.
  
  args = table.pack(...); args.n = nil
  query = ""
  for i, v in ipairs(args) do
    query = query..v.."&"
  end
  query = string.sub(query, 0 , (string.len(query)-1))
  print(query)
  
  HttpClient.Download{
    Url = "http://"..ip.."/mwapi?method="..query,
    Headers = {
      ["Content-Type"] = "application/json",
      ["Cookie"] = session_id
    },
    Timeout = 5,
    EventHandler = Result
  }
end


function Result(tbl, code, data, err, headers)
  
-- Stop the pollTimer and set pollWait to true.
  --pollTimer:Stop()
  --pollWait = true
  --print("POLLWAIT IS TRUE")

-- Print the HTTP response data.
  --print(string.format( "[%i] [%s]%s", code, data, err and string.format(" Error: [%s]", err) or "" ) )
  --print(string.format( "[%i] [%s]%s", code, tbl.Url, err and string.format(" Error: [%s]", err) or "" ) )
  --print(tbl, code, data, err, headers)

-- Decode the data tables from the HTTP download request
  resultdata = rapidjson.decode(data)
  print(data)

  -- Session ID "Login authentication: carry sid=xxxxxxxxx in cookies". SID is sent as a Cookie in all subsequent HttpDownload requests.
  if headers["Set-Cookie"] then
      for sid, cookie in string.gmatch(headers["Set-Cookie"], "(%w+)=(%w+)") do
      session_id = sid.."="..cookie
      print("Session ID: "..session_id)
      end
  end

  -- 'Reboot' Command Response - will SetStatus to Initializing and Initialize()/reconnect after 60 seconds. pollDelayTimer:Stop() is also within the Reboot EventHandler.
  -- Unable to simply restart the pollDelayTimer as the script needs to log in to the device following reboot, therefore Initialize() is used.
  if query == "reboot" then
    print("DEVICE REBOOTED")
    --pollTimer:Stop()
    pollDelayTimer:Stop()
    ResetTextIndicators()
    --pollDelayTimer:Start(90)
    Timer.CallAfter(Initialize, 60)
  return SetStatus(5, "Device Rebooted") end

  -- 'Device Name' Command Response - will SetStatus to Initializing and Initialize()/reconnect after 60 seconds. pollDelayTimer:Stop() is also within the Reboot EventHandler.
  -- Unable to simply restart the pollDelayTimer as the script needs to log in to the device following reboot, therefore Initialize() is used.
  local devicename = query
  local pattern = "set%-eth%-config&name="
  local matchResult = string.match(query, pattern)
  
  if matchResult then
    print("DEVICE NAME CHANGED")
    --pollTimer:Stop()
    pollDelayTimer:Stop()
    --ResetTextIndicators()
    --pollDelayTimer:Start(15)
    Timer.CallAfter(Initialize, 60)
  return SetStatus(5, "Device Name Changed - Device Rebooting") end


  if not Controls["Connect"].Boolean then return SetStatus(3, "Component has been Manually Disconnected") end

  if (code == 0.0) then return SetStatus(3, string.format("Magewell Unreachable - Response Code %d", code)), Connect() end
  
  if (code == 401.0) then return SetStatus(1, string.format("Login Unauthorized", code)), Connect() end
  
  if not (code == 200.0) then return SetStatus(1, string.format("Non '200' Response - Response Code %d", code)), Connect() end
  
  --SetStatus(0, string.format("", code))
  
  -- Checks to see is the Status response from the Magewell is '0' (0: MW_STATUS_SUCCESS) before continuing.
  if resultdata.status == 0 then

    SetStatus(0, string.format("", code))

    if query == "get-summary-info" then
  
      -- Device Name. "name. Shows the name of the Pro Convert unit."
      Controls["Device Name"].String = resultdata.device["name"]
      --print("Device Name: "..resultdata.device["name"])

      -- Model. "model. Shows the model name of the Pro Convert unit, including HDMI 4K Plus, HDMI Plus, SDI Plus, ...)"
      Controls["Model"].String = resultdata.device["model"]
      --print("Model: "..resultdata.device["model"])

      -- Serial. "serial-no. Shows the serial number of the Pro unit."
      Controls["Serial"].String = resultdata.device["serial-no"]
      --print("Serial: "..resultdata.device["serial-no"])

      -- Hardware Revision. "hw-revision. Shows the hardware version of the Pro unit, the value ranges from A to Z."
      Controls["Hardware Revision"].String = resultdata.device["hw-revision"]
      --print("Hardware Revision: "..resultdata.device["hw-revision"])

      -- Firmware Version. "fw-version. Shows the current firmware version that’s installed in the Pro unit."
      Controls["Firmware Version"].String = resultdata.device["fw-version"]
      --print("Firmware Version: "..resultdata.device["fw-version"])

      -- Firmware Up To Date. "up-to-date. Shows whether the firmware is up to date. If yes, shows true; otherwise, it shows false."
      Controls["Firmware Up To Date"].Boolean = resultdata.device["up-to-date"]
      if resultdata.device["up-to-date"] == true then
        --print("Firmware Up To Date: "..tostring(resultdata.device["up-to-date"]))
      elseif resultdata.device["up-to-date"] == false and FirmwareUpToDateEventLog == false then
        -- Create an Event Log warning that the firmware is out of date.
        EventLog("Firmware Version "..Controls["Firmware Version"].String.." is out of date. Please upgrade.", EventLogSeverity[2])
        -- Update the FirmwareUpTpDateEventLog variable to true so the Event Log is not being spammed.
        FirmwareUpToDateEventLog = true
        --print("Firmware Up To Date: "..tostring(resultdata.device["up-to-date"]))
      end

      -- CPU Usage. "cpu-usage. Shows the current CPU usage (the load on the processor, shown as a percentage) of the Pro Convert device."
      Controls["CPU Usage"].String = resultdata.device["cpu-usage"].."%"
      --print("CPU Usage: "..resultdata.device["cpu-usage"].."%")

      -- Memory Usage. "memory-usage. Shows the current memory usage."
      Controls["Memory Usage"].String = resultdata.device["memory-usage"].."%"
      --print("Memory Usage: "..resultdata.device["memory-usage"].."%")

      -- Core Temperature. "core-temp. Shows the current temperature(℃) of the unit's processor."
      Controls["Core Temperature"].String = resultdata.device["core-temp"].."\u{2103}" -- appends ℃
      --print("Core Temperature: "..resultdata.device["core-temp"].."\u{2103}")

      -- Board ID. "board-id. Shows the rotary switch number, from 0 to F."
      Controls["Board ID"].String = resultdata.device["board-id"]
      --print("Rotary Switch Board ID: "..resultdata.device["board-id"])

      -- Up Time. "up-time Shows the elapsed time since the Pro device’s last boot-up, in seconds."
      if resultdata.device["up-time"] ~= nil then
        up_time = tostring(resultdata.device["up-time"])
      end
      if up_time then

      --convert_seconds_to_hours(up_time)
        local days = math.floor(up_time / 86400)
        local remaining = up_time % 86400
        local hours = math.floor(remaining / 3600)
        remaining = remaining % 3600
        local minutes = math.floor(remaining / 60)
        local seconds = remaining % 60

        -- Format the result
        local formatted_time = string.format("%02d:%02d:%02d:%02d", days, hours, minutes, seconds)
      
        Controls["Up Time"].String = formatted_time.." (DD:HH:MM:SS)"
        --print("Up Time: "..formatted_time.." (DD:HH:MM:SS)")
      end

      -- NDI Current Source. "name. Shows NDI source name."
      Controls["NDI Current Source"].String = resultdata.ndi["name"]
      --print("NDI Current Source: "..resultdata.ndi["name"])

      -- NDI Connected. "connected. True indicates the NDI function is enabled, otherwise it is false.
      Controls["NDI Connected"].Boolean = resultdata.ndi["connected"]
      --print("NDI Connected: "..tostring(resultdata.ndi["connected"]))

      -- NDI Tally Preview. "tally-preview. Shows whether the NDI stream has been selected to the Preview bus by any client. If yes, it shows true; otherwise, it shows false."
      Controls["NDI Tally Preview"].Boolean = resultdata.ndi["tally-preview"]
      --print("NDI Tally Preview: "..tostring(resultdata.ndi["tally-preview"]))

      -- NDI Tally Program. "tally-program. Shows whether the NDI stream has been selected to the Program bus by any client. If yes, it shows true, otherwise, it shows false."
      Controls["NDI Tally Program"].Boolean = resultdata.ndi["tally-program"]
      --print("NDI Tally Program: "..tostring(resultdata.ndi["tally-program"]))

      -- NDI Video Drop Frames. "video-drop-frames. Shows dropped video frames in the previous second."
      Controls["NDI Video Drop Frames"].String = resultdata.ndi["video-drop-frames"]
      --print("NDI Video Drop Frames: "..resultdata.ndi["video-drop-frames"])

      -- NDI Audio Drop Frames. "audio-drop-frames. Shows dropped audio frames in the previous second."
      Controls["NDI Audio Drop Frames"].String = resultdata.ndi["audio-drop-frames"]
      --print("NDI Audio Drop Frames: "..resultdata.ndi["audio-drop-frames"])

      -- NDI Video Bitrate. "video-bit-rate. Shows the video bitrate for the previous second in kbps."
      if resultdata.ndi["video-bit-rate"] ~= nil then
        ndi_video_bitrate = tostring(resultdata.ndi["video-bit-rate"])
      end
      if string.len(ndi_video_bitrate) >3 then
        Controls["NDI Video Bitrate"].String = ndi_video_bitrate:sub(1, -3 -1).."."..ndi_video_bitrate:sub(-3).."Mbps"
        --print("NDI Video Bitrate: "..ndi_video_bitrate:sub(1, -3 -1).."."..ndi_video_bitrate:sub(-3).."Mbps")
      elseif string.len(ndi_video_bitrate) <=3 then
        ndi_video_bitrate = string.match(data, '"video%-bit%-rate":%s(.-),')
        Controls["NDI Video Bitrate"].String = ndi_video_bitrate.."Kbps"
        --print("NDI Video Bitrate: "..ndi_video_bitrate.."Kbps") 
      end

      -- NDI Audio Bitrate. "audio-bit-rate. Shows the audio bitrate for the previous second in Kbps."
      if resultdata.ndi["audio-bit-rate"] ~= nil then
        ndi_audio_bitrate = tostring(resultdata.ndi["audio-bit-rate"])
      end
      if string.len(ndi_audio_bitrate) >3 then
        Controls["NDI Audio Bitrate"].String = ndi_audio_bitrate:sub(1, -3 -1).."."..ndi_audio_bitrate:sub(-3).."Mbps"
        --print("NDI Audio Bitrate: "..ndi_audio_bitrate:sub(1, -3 -1).."."..ndi_audio_bitrate:sub(-3).."Mbps")
      elseif string.len(ndi_audio_bitrate) <=3 then
        ndi_audio_bitrate = string.match(data, '"audio%-bit%-rate":%s(.-),')
        Controls["NDI Audio Bitrate"].String = ndi_audio_bitrate.."Kbps"
        --print("NDI Audio Bitrate: "..ndi_audio_bitrate.."Kbps") 
      end

      -- NDI Resolution. "video-width Shows the total number of pixels, horizontally. video-height. Shows the total number of pixels, vertically."
      if resultdata.ndi["video-width"] ~= nil and resultdata.ndi["video-height"] ~= nil then
        video_width = resultdata.ndi["video-width"]
        video_height = resultdata.ndi["video-height"]
        resolution = video_width.."x"..video_height
      end
      if resolution then
        Controls["NDI Resolution"].String = resolution
        --print("NDI Resolution: "..resolution)
      end

      -- NDI Video Scan. "video-scan. Shows the video scan format, including progressive, interlaced, psf."
      Controls["NDI Video Scan"].String = resultdata.ndi["video-scan"]:gsub("^%l", string.upper)
      --print("NDI Video Scan: "..resultdata.ndi["video-scan"]:gsub("^%l", string.upper))

      -- NDI Field Rate. "video-field-rate. Shows the video frame, including 24, 25, 29.97, 30, 48, 50, 59.94, 60."
      Controls["NDI Field Rate"].String = resultdata.ndi["video-field-rate"].."Hz"
      --print("NDI Field Rate: "..resultdata.ndi["video-field-rate"].."Hz")

      -- NDI Audio Channels. "audio-num-channels. Shows the total number of NDI audio output channels."
      Controls["NDI Audio Channels"].String = resultdata.ndi["audio-num-channels"]
      --print("NDI Audio Channels: "..resultdata.ndi["audio-num-channels"])

      -- NDI Audio Sampling.
      -- "audio-sample-rate. Shows the sampling rate of the audio output, such as 32000, 44100, ..."
      -- "audio-bit-count. Shows the sampling bit depth of the audio output, including 16, 20, 24, ..."
      if resultdata.ndi["audio-sample-rate"] ~= nil and resultdata.ndi["audio-bit-count"] ~= nil then
        ndi_audio_sample_rate = resultdata.ndi["audio-sample-rate"]
        ndi_audio_bit_count = resultdata.ndi["audio-bit-count"]
      end
      if ndi_audio_sample_rate and ndi_audio_bit_count then
        Controls["NDI Audio Sampling"].String = ndi_audio_sample_rate.."Hz, "..ndi_audio_bit_count.." bits"
        --print("NDI Audio Sampling: "..ndi_audio_sample_rate.."Hz, "..ndi_audio_bit_count.." bits")
      end

      -- NDI Jitter Video. "video-jitter. Shows the video difference between the estimated and actual arrival time of a frame of source image."
      Controls["NDI Jitter Video"].String = resultdata.ndi["video-jitter"].."ms"
      --print("NDI Jitter Video: "..resultdata.ndi["video-jitter"].."ms")
    
      -- NDI Jitter Audio. "audio-jitter. Shows the audio difference between the estimated and actual arrival time of a frame of source image."
      Controls["NDI Jitter Audio"].String = resultdata.ndi["audio-jitter"].."ms"
      --print("NDI Jitter Audio: "..resultdata.ndi["audio-jitter"].."ms")
    
    end
    
    if query == "get-eth-status" then

      -- DHCP. "use-dhcp Indicates whether to use DHCP to obtain IP address. If yes, it shows true; otherwise, it is false."
      Controls["DHCP"].Boolean = resultdata["use-dhcp"]
      --print("DHCP: "..tostring(resultdata["use-dhcp"]))

      -- MAC Address. "mac-addr. Shows the MAC address."
      Controls["MAC Address"].String = resultdata["mac-addr"]
      --print("MAC Address: "..resultdata["mac-addr"])

      -- Ethernet Connection. "state: Indicates Ethernet network connection status and the bandwidth speed, including down, disconnected, 10m, 100m, 1000m, 2500m, 5000m, 10000m."
      if resultdata["state"] ~= nil then
        ethernet_state = resultdata["state"]:sub(1,-2) -- removes the "m" character from the end of the response.
      end
      if string.len(ethernet_state) >3 then
        Controls["Ethernet Connection"].String = string.format("%2.1f", ethernet_state:sub(1, -3 -1).."."..ethernet_state:sub(-3)).."Gbps"
        --print("Ethernet Connection: "..string.format("%2.1f", ethernet_state:sub(1, -3 -1).."."..ethernet_state:sub(-3)).."Gbps")
      elseif string.len(ethernet_state) <=3 then
        Controls["Ethernet Connection"].String = ethernet_state.."Mbps"
        --print("Ethernet Connection: "..ethernet_state.."Mbps")
      end

      -- Ethernet Send Speed. "tx-speedkbps. Shows the Ethernet send speed in Kbps."
      if resultdata["tx-speed-kbps"] ~= nil then
        txspeed = tostring(resultdata["tx-speed-kbps"])
      end
      if string.len(txspeed) >3 then
        Controls["Ethernet Send Speed"].String = txspeed:sub(1, -3 -1).."."..txspeed:sub(-3).."Mbps"
        --print("Ethernet Send Speed: "..txspeed:sub(1, -3 -1).."."..txspeed:sub(-3).."Mbps")
      elseif string.len(txspeed) <=3 then
        txspeed = resultdata["tx-speed-kbps"]
        Controls["Ethernet Send Speed"].String = txspeed.."Kbps"
        --print("Ethernet Send Speed: "..txspeed.."Kbps") 
      end

      -- Ethernet Receive Speed. "rx-speedkbps. Shows the Ethernet receive speed in Kbps."
      if resultdata["rx-speed-kbps"] ~= nil then
        rxspeed = tostring(resultdata["rx-speed-kbps"])
      end
      if string.len(rxspeed) >3 then
        Controls["Ethernet Receive Speed"].String = rxspeed:sub(1, -3 -1).."."..rxspeed:sub(-3).."Mbps"
        --print("Ethernet Receive Speed: "..rxspeed:sub(1, -3 -1).."."..rxspeed:sub(-3).."Mbps")
      elseif string.len(rxspeed) <=3 then
        rxspeed = resultdata["rx-speed-kbps"]
        Controls["Ethernet Receive Speed"].String = rxspeed.."Kbps"
        --print("Ethernet Receive Speed: "..rxspeed.."Kbps") 
      end
    end

    if query == "get-ndi-config" then

      -- NDI Group Name. "group-name. Indicates the NDI group name to which the converter is multicasted."
      Controls["NDI Group Name"].String = resultdata["group-name"]
      --print("NDI Group Name: "..resultdata["group-name"])

    end
    
    if query == "list-channels" then
      
      all_presets = {}
      for item, value in pairs(resultdata) do
        if item == "channels" then
          channels = {}
          tbl = value
          for i, source_tbl in pairs(tbl) do
            table.insert(channels, {is_ndi = false, name = source_tbl["name"], url = source_tbl["url"]})
            --print(source_tbl["name"])
          end
          for i, tbl in ipairs(channels) do all_presets[i] = tbl end
          
          --[[for index, data in ipairs(all_presets) do
            print(index)
            for key, value in pairs(data) do
            print('\t', key, value)
            end
          end]]
        
        end
      end
      setPresetChoices()

    end

    if query == "get-ndi-sources" then

      all_sources = {}
      for item, value in pairs(resultdata) do
        if item == "sources" then
          ndi_sources = {}
          tbl = value
          for i, source_tbl in pairs(tbl) do
            table.insert(ndi_sources, {is_ndi = true, name = source_tbl["ndi-name"], url = source_tbl["ip-addr"]})
            --print(source_tbl["ndi-name"])
          end
          for i, tbl in ipairs(ndi_sources) do all_sources[i] = tbl end

          --[[for index, data in ipairs(all_sources) do
            print(index)
            for key, value in pairs(data) do
            print('\t', key, value)
            end
          end]]

        end
      end
      setNDIChoices()

    end

    -- Start the PollDelay, or Poll()
    StartPollDelay()
  
  elseif resultdata.status ~= 0 then
    -- if Magewell status does not equal '0' (0: MW_STATUS_SUCCESS), stop polling.
    pollDelayTimer:Stop()

    -- SetStatus based on Magwell API Status Codes. Refer status_tbl = {}
    print("Magewell API Status Code: "..string.match(data, '"status": (%d+)'))
    lookup = tonumber(string.match(data, '"status": (%d+)'))
    code = status_tbl[lookup].code
    message = status_tbl[lookup].message
    SetStatus(code, message)
    --SetStatus(1, string.format("INSERT MAGEWELL STATUS CODE HERE", code))

    Timer.CallAfter(Initialize, 60)

  end

end



----- MAGEWELL COMMANDS / EVENTHANDLERS ------
---------------------------------------------

-- Device Name. This command will immediately initiate a reboot of the Magewell device.
-- Response to this command is dealt with in the Result() function. SetStatus to Initializing, will stop and start the pollTimer.
Controls["Device Name"].EventHandler = function(c)
  pollDelayTimer:Stop()
  HttpDownload("set-eth-config&name="..Controls["Device Name"].String)
end

-- NDI Presets
Controls["NDI Presets"].EventHandler = function(c)
  for i, name in ipairs(presetchoices) do
    if Controls["NDI Presets"].String == name then
      local is_ndi = tostring(all_presets[i]["is_ndi"])
      local channel = HttpClient.EncodeString(all_presets[i]["name"])
      HttpDownload("set-channel&ndi-name="..is_ndi.."&name="..channel)
      -- Clear control string so the EventHandler will work if the same preset needs to be selected again.
      Controls["NDI Presets"].String = ""
      -- Set the Pollwait to True so the device has time to respond to command before next Poll.
      StartPollDelay(ctl)
    end
  end
end

-- NDI Sources
Controls["NDI Sources"].EventHandler = function(c)
  for i, name in ipairs(ndichoices) do
    if Controls["NDI Sources"].String == name then
      local is_ndi = tostring(all_sources[i]["is_ndi"])
      local channel = HttpClient.EncodeString(all_sources[i]["name"])
      HttpDownload("set-channel&ndi-name="..is_ndi.."&name="..channel)
      -- Clear control string so the EventHandler will work if the same source needs to be selected again.
      Controls["NDI Sources"].String = ""
      -- Set the Pollwait to True so the device has time to respond to command before next Poll.
      StartPollDelay(ctl)
    end
  end
end

-- NDI Group Name
Controls["NDI Group Name"].EventHandler = function(c)
  HttpDownload("set-ndi-config&group-name="..Controls["NDI Group Name"].String)
  -- Set the Pollwait to True so the device has time to respond to command before next Poll.
  StartPollDelay(ctl)
end

-- Run Connect() function when the Connect button is toggled.
Controls["Connect"].EventHandler = function(c)
  Connect()
end

-- Run Connect() function when the Username is is changed.
Controls["Username"].EventHandler = function(c)
  Connect()
end

-- Run Connect() function when the Password is is changed.
Controls["Password"].EventHandler = function(c)
  Connect()
end

-- Reboot. This command will immediately initiate a reboot of the Magewell device.
-- Response to this command is dealt with in the Result() function. SetStatus to Initializing, will stop and start the pollTimer.
Controls["Reboot"].EventHandler = function(c)
  --pollTimer:Stop()
  pollDelayTimer:Stop()
  HttpDownload("reboot")
end

-- Re-initializes the script if the IP Address changes.
Controls["IP Address"].EventHandler = function(c)
  Initialize()
end


pollTimer.EventHandler = Poll
pollDelayTimer.EventHandler = StartPollDelay

Initialize()

end